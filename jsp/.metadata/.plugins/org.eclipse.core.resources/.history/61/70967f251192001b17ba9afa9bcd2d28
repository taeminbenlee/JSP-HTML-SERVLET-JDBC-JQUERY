package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import Dto.BbsDto;
import db.DBClose;
import db.DBConnection;



public class BbsDao {
	private static BbsDao dao= new BbsDao();
	
	private BbsDao() {
		
	}
	
	public static BbsDao getInstance() {
		return dao;
	}
	
	public boolean writeBbs(BbsDto bbs) {
		String sql =  " INSERT INTO BBS (SEQ, MYID, "
					+ " TITLE, MYCONTENT, WDATE, FILENAME, VCOUNT, DEL)"
					+ " VALUES(SEQ_BBS.NEXTVAL, ?, ?, ?, SYSDATE, ?, 0, 0) ";
		
		Connection conn = null;
		PreparedStatement psmt = null;		
		int count = 0;
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/3 S writeBbs");
				
			psmt = conn.prepareStatement(sql);
			psmt.setString(1, bbs.getMyid());
			psmt.setString(2, bbs.getTitle());
			psmt.setString(3, bbs.getMycontent());
			psmt.setString(4, bbs.getFilename());
			
			System.out.println("2/3 S writeBbs");
			
			count = psmt.executeUpdate();	
			System.out.println("3/3 S writeBbs");
			
		} catch (SQLException e) {
			System.out.println("fail writeBbs");
			e.printStackTrace();
		} finally {
			DBClose.close(conn, psmt, null);
		}

		return count>0?true:false;
	}
	
	public List<BbsDto> getBbsList() {
		
		String sql =  " SELECT SEQ, MYID, TITLE, MYCONTENT, WDATE, FILENAME, VCOUNT, DEL "
					+ " FROM BBS "
					+ " WHERE DEL = 0"
					+ " ORDER BY SEQ DESC ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		List<BbsDto> list = new ArrayList<BbsDto>();
		

		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/4 S getBbsList");
			
			psmt = conn.prepareStatement(sql);
			System.out.println("2/4 S getBbsList");
			
			rs = psmt.executeQuery();
			System.out.println("3/4 S getBbsList");
			
			while(rs.next()) {
				int i = 1;
				BbsDto dto = new BbsDto(rs.getInt(i++), 
										rs.getString(i++), 
										rs.getString(i++), 
										rs.getString(i++), 
										rs.getString(i++), 
										rs.getString(i++),
										rs.getInt(i++), 
										rs.getInt(i++) 
										);
				list.add(dto);
			}
			System.out.println("4/4 S getBbsList");
			
		} catch (SQLException e) {	
			System.out.println("Fail getBbsList");
			e.printStackTrace();
		} finally {
			DBClose.close(conn, psmt, rs);			
		}
		
		return list;
	}
	
	public BbsDto getBbs(int seq) {
		String sql =  " SELECT SEQ, MYID, TITLE, MYCONTENT, WDATE, FILENAME, VCOUNT, DEL "
					+ " FROM BBS "
					+ " WHERE SEQ = ? AND DEL = 0  ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		BbsDto bbs = null;
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/4 getBbs Success");
			
			psmt = conn.prepareStatement(sql);
			psmt.setInt(1, seq);
			System.out.println("2/4 getBbs Success");
			
			rs = psmt.executeQuery();
			System.out.println("3/4 getBbs Success");
			
			if(rs.next()) {
				int i = 1;				
				bbs = new BbsDto(rs.getInt(i++), 
								rs.getString(i++), 
								rs.getString(i++), 
								rs.getString(i++), 
								rs.getString(i++), 
								rs.getString(i++),
								rs.getInt(i++),
								rs.getInt(i++)
								);				
			}
			System.out.println("4/4 getBbs Success");
			
		} catch (Exception e) {		
			System.out.println("getBbs Fail");
			e.printStackTrace();
		} finally {
			DBClose.close(conn, psmt, rs);			
		}
				
		return bbs;
		
	}
	
	public boolean deleteBbs(int seq) {
		String sql =  " UPDATE BBS "
					+ " SET DEL = 1 "
					+ " WHERE SEQ = ? ";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		int count = 0;
		
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/3 S deleteBbs");
			
			psmt = conn.prepareStatement(sql);
			psmt.setInt(1, seq);
			System.out.println("2/3 S deleteBbs");
			
			count = psmt.executeUpdate();
			System.out.println("3/3 S deleteBbs");
			
		} catch (Exception e) {		
			System.out.println("fail deleteBbs");
			e.printStackTrace();
		} finally {
			DBClose.close(conn, psmt, null);			
		}
		
		return count>0?true:false;
	}
}
